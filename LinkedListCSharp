#region linkedList implementation
            var linkedList = new LinkedList<string>("10");

            linkedList.Append("5");
            linkedList.Append("16");
            linkedList.Append("40");

            linkedList.PrintAll();

            //Console.WriteLine("---Append after---");
            //linkedList.AppendAfter("5","100");
            //linkedList.PrintAll();

            Console.WriteLine("---Remove---");
            linkedList.Remove("16");
            linkedList.PrintAll();


            #endregion



class LinkedList<T>
    {
        private Node<T> head;

        public LinkedList(T value)
        {
            head = new Node<T>(value, null);
        }

        public void PrintAll()
        {
            var temp = head;
            Console.WriteLine("linked list");
            while (temp != null)
            {
                Console.Write($"{temp.Value}");
                temp = temp.NextNode;
                if (temp != null)
                {
                    Console.Write(" -->> ");
                }
            }
            Console.WriteLine();
        }

        //10>>5>>16>>40
        public void Append(T value)
        {
            var temp = head;
            while (true)
            {
                if (temp.NextNode == null)
                {
                    temp.NextNode = new Node<T>(value, null);
                    break;
                }

                var veryNextNode = temp.NextNode;
                temp=veryNextNode;
            }
        }


        //10>>5>>16>>40; 10;5;20;16;40
        public void AppendAfter(T value,T newValue)
        {
            var iterativeNode = head;
            //1) 10 , then 5 , itNode=5; 
            // itNode.Next=16>>40...
            // newNode =20; newNode.NextNode= 16>>40....
            while (!iterativeNode.Value.Equals(value))
            {
                iterativeNode = iterativeNode.NextNode; 
            }

            //Got the node i.e 5
            var newNode= new Node<T>(newValue, iterativeNode.NextNode);
            
            iterativeNode.NextNode = newNode;
        }

        public void Remove(T value)
        {
            var currentNode = head;
            //value 16
            //1) 10 , then 5 , then 16, itNode=16 >> to be removed; 
            Node<T> previousNode = null;
            while (!currentNode.Value.Equals(value))
            {
                previousNode = currentNode;
                currentNode = currentNode.NextNode;
            }

            //Got the node: currentNode, previous node
            if (previousNode != null)
            {
                previousNode.NextNode = currentNode.NextNode;
            }
            //If head is to be removed, previous node will be null
            else
            {
                var nextNode = head.NextNode;
                head = nextNode;
            }

        }
    }

    class Node<T>
    {
        public Node<T> NextNode { get; set; }

        public int ObjectHashCode => GetHashCode();
        public T Value { get; set; }

        public Node(T value, Node<T> next)
        {
            Value = value;
            
            NextNode = next;
            
        }
    }
